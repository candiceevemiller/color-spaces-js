Why does this random walk I wrote look suspiciously non-random?

I'm trying to write a random walk in JavaScript using P5.js. My goal is to let it walk randomly in the x or y direction and randomly through a subset of color-space. I added modular division into the walk so that it just loops around at the edges.

The problem is nearly all of the random walks seem to move in a very similar way - in a sort of stair-step diagonal pattern. The color walk seems to work but also tends to spend a suspicious amount of time clustered around hue=0 (red). I did very similar code in [Python and OpenCV](https://github.com/candiceevemiller/color-spaces) earlier today and it produced exactly what one would expect for a random walk (I know python uses a Mersenne twister and JavaScript likely uses something else for their pseudorandom RNG but I suspect that something else is at play here.

I've attached some examples of the output at the end of the post so you can see what I mean but the code is also hosted [here](https://candiceevemiller.github.io/color-spaces-js/).

JavaScript Code is below, repo is [here](https://github.com/candiceevemiller/color-spaces-js)

```
let WIDTH = window.innerWidth;
let HEIGHT = window.innerHeight;

// TODO add timeout function so it draws slower
function randomWalk() {
    // Constants
    let STEP_SIZE = 3;
    let NUM_STEPS = 10000;
    let RADIUS = 10;
    
    // Starting Values
    let cX = Math.floor(WIDTH / 2);
    let cY = Math.floor(HEIGHT / 2);
    let hue = 0;
    colorMode(HSB);

    for (let i=0; i < NUM_STEPS; i++) {  
      // draw circle
      noStroke(0);  
      fill(hue, 100, 100);
      circle(cX, cY, RADIUS);
      
      // Get random directions
      let direction = floor(random(5));  // this always returns 0,1,2,or 3
      let hueDirection = floor(random(2));  // this always returns 0 or 1
    
      // update values for next circle
      switch (direction) {
          case 0:
              cX -= STEP_SIZE; // move left
          case 1:
              cX += STEP_SIZE; // move right
          case 2:
              cY -= STEP_SIZE; // move up
          case 3:
              cY += STEP_SIZE; // move down
      }
    
      if (hueDirection === 1) {
          hue += STEP_SIZE;
      } else {
          hue -= STEP_SIZE;
      }
    
      // keep everything within bounds
      hue %= 360;  // HSV is a polar color space
      cX %= WIDTH;
      cY %= HEIGHT;
    }  
}

function setup() {
  createCanvas(WIDTH, HEIGHT);
  noLoop(); // p5 will loop code in draw() infinitely without this
}

function draw() {
    randomWalk();
}
```

[Example 1](https://i.stack.imgur.com/kIoJc.png)
[Example 2](https://i.stack.imgur.com/w5bkG.png)
[Example 3](https://i.stack.imgur.com/4IMT0.png)

I tried flipping around the order of the direction cases and it produced different results - though they were clearly still not a random walk.